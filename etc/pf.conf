# Define interfaces
wan="bwfm0"
lan="bse0"
lan_net = "172.16.0.0/30"

# Set global behaviours
set block-policy drop
set skip on lo
set state-policy if-bound
set limit { states 1000, src-nodes 2000, frags 5000 } 
set loginterface $wan

# Set default behaviours
block drop log all
antispoof log quick for { lo $lan $wan }

# Tables and Blocklists
table <badactors> persist

# Always drop a source if in these tables
block quick from <badactors> to any

# Normalise traffic
match in all scrub (reassemble tcp no-df random-id max-mss 1440)

# NAT policy (LAN -> WAN)
match out on $wan from $lan_net to any nat-to ($wan) label "nat"

# WAN policies (treat bwfm0 as untrusted)
## Outbound connections/communications are allowed
pass out on $wan inet proto { tcp udp icmp } from ($wan) to any keep state label "wan-out"
pass out on $wan inet proto { tcp udp icmp } from $lan_net to any keep state

## DHCP client
pass out on $wan proto udp from port 68 to port 67 keep state
pass in on $wan proto udp from port 67 to port 68 keep state

## DNS
pass out on $wan proto tcp to port 853 \
        keep state (max-src-conn-rate 100/10, max-src-conn 200)

## ICMP
pass in on $wan inet proto icmp icmp-type { echorep, timex, unreach } keep state \
        (max-src-conn-rate 5/10, overload <badactors>)

## NTP
pass out on $wan proto udp from any to port 123 keep state
pass in on $lan proto udp from any to ($lan) port 123 keep state

## SSH
block in log on $wan proto tcp from any to ($wan) port 22 flags S/SA 
pass in quick log on $lan proto tcp from ($lan) to ($lan) port 22 flags S/SA  \
        keep state (max-src-conn 10, max-src-conn-rate 10/10, overload <badactors>) label "lan-ssh"

# LAN policy
pass in on $lan from $lan_net to any keep state
